#!/bin/bash

# SAFE REFACTOR SCRIPT
# Integrates all safety tools for code removal/refactoring

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

echo "üõ°Ô∏è  SAFE REFACTOR TOOL"
echo "====================="
echo "Project: $(basename "$PROJECT_ROOT")"
echo "Date: $(date)"
echo ""

# Check if functions to analyze were provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <function1> [function2] [function3] ..."
    echo ""
    echo "Example: $0 toggleFilter applyDeckBuilderFilters"
    echo ""
    echo "This script will:"
    echo "1. Analyze dependencies for each function"
    echo "2. Run security validation"
    echo "3. Provide removal recommendations"
    echo ""
    exit 1
fi

FUNCTIONS_TO_ANALYZE=("$@")

echo "üìù Functions to analyze: ${FUNCTIONS_TO_ANALYZE[*]}"
echo ""

# Step 1: Dependency Analysis
echo "üîç STEP 1: DEPENDENCY ANALYSIS"
echo "==============================="

UNSAFE_FUNCTIONS=()
SAFE_FUNCTIONS=()

for func in "${FUNCTIONS_TO_ANALYZE[@]}"; do
    echo "Analyzing: $func"
    
    if node tools/dependency-analyzer.js . "$func"; then
        SAFE_FUNCTIONS+=("$func")
        echo "‚úÖ $func appears safe to remove"
    else
        UNSAFE_FUNCTIONS+=("$func")
        echo "‚ö†Ô∏è  $func has dependencies - NOT safe to remove"
    fi
    echo ""
done

# Step 2: Security Validation
echo "üîí STEP 2: SECURITY VALIDATION"
echo "==============================="

echo "Running baseline security scan..."
if node tools/security-validator.js .; then
    echo "‚úÖ Current security posture is acceptable"
else
    echo "‚ö†Ô∏è  Current security has issues - review before proceeding"
fi
echo ""

# Step 3: Summary and Recommendations
echo "üìä STEP 3: SUMMARY & RECOMMENDATIONS"
echo "====================================="

echo "SAFE TO REMOVE (${#SAFE_FUNCTIONS[@]} functions):"
for func in "${SAFE_FUNCTIONS[@]}"; do
    echo "  ‚úÖ $func"
done
echo ""

echo "NOT SAFE TO REMOVE (${#UNSAFE_FUNCTIONS[@]} functions):"
for func in "${UNSAFE_FUNCTIONS[@]}"; do
    echo "  ‚ö†Ô∏è  $func"
done
echo ""

# Step 4: Next Steps
echo "üöÄ STEP 4: NEXT STEPS"
echo "======================"

if [ ${#UNSAFE_FUNCTIONS[@]} -gt 0 ]; then
    echo "‚ùå CANNOT PROCEED - Some functions have dependencies"
    echo ""
    echo "Recommendations:"
    echo "1. Review the dependency analysis output above"
    echo "2. Fix or update all dependent code first"
    echo "3. Re-run this analysis"
    echo "4. Consider refactoring instead of removal"
    echo ""
    exit 1
fi

if [ ${#SAFE_FUNCTIONS[@]} -gt 0 ]; then
    echo "‚úÖ Ready to proceed with removal"
    echo ""
    echo "Next steps:"
    echo "1. Review tools/code-removal-checklist.md"
    echo "2. Run browser tests: new FFTCGTestSuite().runTests()"
    echo "3. Comment out functions first (don't delete)"
    echo "4. Test thoroughly"
    echo "5. Get user approval"
    echo "6. Only then delete the commented code"
    echo ""
    echo "REMEMBER: Always test after each step!"
fi

# Generate removal script template
if [ ${#SAFE_FUNCTIONS[@]} -gt 0 ]; then
    SCRIPT_FILE="safe-removal-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$SCRIPT_FILE" << EOF
# Safe Removal Plan - $(date)

## Functions Approved for Removal
$(for func in "${SAFE_FUNCTIONS[@]}"; do echo "- $func"; done)

## Pre-Removal Checklist
- [ ] Run browser tests: \`new FFTCGTestSuite().runTests()\`
- [ ] Manual test all major features
- [ ] Create git commit point for easy rollback

## Removal Steps
1. Comment out each function (don't delete yet):
$(for func in "${SAFE_FUNCTIONS[@]}"; do echo "   - [ ] $func"; done)

2. Test after commenting:
   - [ ] Browser console errors check
   - [ ] Manual feature testing
   - [ ] Run: \`new FFTCGTestSuite().runTests()\`

3. If all tests pass:
   - [ ] Get user/stakeholder approval
   - [ ] Delete commented code
   - [ ] Final test
   - [ ] Commit changes

## Emergency Rollback
\`\`\`bash
git log --oneline -5  # Find commit hash
git revert <commit-hash>
git push
\`\`\`

## Notes
- Generated by safe-refactor.sh on $(date)
- All functions passed dependency analysis
- Security validation passed
EOF

    echo "üìã Generated removal plan: $SCRIPT_FILE"
fi

echo ""
echo "üõ°Ô∏è  Safe refactor analysis complete!"